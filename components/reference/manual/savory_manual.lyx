#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{prettyref}
\newrefformat{}{section~\ref{#1}}
\sloppy
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman newcent
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 0
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Savory Framework
\end_layout

\begin_layout Author
Version %VERSION%
\begin_inset Newline newline
\end_inset

Main text written by Tal Liron
\end_layout

\begin_layout Standard
\noindent
\align center
Copyright 2011-2012 by Three Crickets LLC.
\begin_inset Newline newline
\end_inset

This work is licensed under a
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License"
target "http://creativecommons.org/licenses/by-nc-sa/3.0/"

\end_inset

.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Authentication Service
\end_layout

\begin_layout Standard
This all-important service manages a few systems, which together allow your
 site to be 
\begin_inset Quotes eld
\end_inset

logged into
\begin_inset Quotes erd
\end_inset

 by individual users.
 
\end_layout

\begin_layout Subsection
Users
\end_layout

\begin_layout Standard
Users are maintained in a simple MongoDB collection.
 You can easily attach settings to any user document, which can have any
 structure and depth you need.
\end_layout

\begin_layout Standard
Passwords are hashed many times and stored with a random salt.
 This good practice makes sure that even if a hacker were to steal your
 database and hack into a few accounts, they would not be able to use the
 results of their work to crack the other passwords.
\end_layout

\begin_layout Standard
Users are considered 
\begin_inset Quotes eld
\end_inset

entities
\begin_inset Quotes erd
\end_inset

 by the <a href="../authorization/">authorization service</a>, such that you
 can attach permissions to user documents.
 Users can inherit permissions from groups and from other users.
\end_layout

\begin_layout Standard
Though you can maintain the user documents yourself, you can add the <a
 href="../../feature/registration/">registration feature</a> to allow individuals
 to create their own users.
\end_layout

\begin_layout Subsection
Sessions
\end_layout

\begin_layout Standard
When users do log in, they get a cookie with a session ID, which matches
 a document in the sessions collection.
 Thus, every conversation is associated with a session.
 You can store anything you want in the session document.
\end_layout

\begin_layout Standard
The <a href="../authorization/">authorization service</a> can check any operation
 against the conversation's session to make sure it's permitted.
\end_layout

\begin_layout Standard
The service comes with a task to make sure to remove sessions that have
 not been used for a while.
 It's a good security feature! (People tend to forget to log out, which
 can be especially dangerous in public places.)
\end_layout

\begin_layout Subsection
Caching Per User
\end_layout

\begin_layout Standard
This very powerful feature uses a cache key patten handler to inject the
 currently logged in user ID into the cache key.
 This lets you cache any /web/dynamic/ or /web/fragment/ resource <i>per
 user</i>, which can do wonders towards helping your site scale.
 Of course, it does not make sense to cache every dynamic part of a page,
 but if you can indetify those fragments that look different only for different
 users then you've achieved a lot.
\end_layout

\begin_layout Subsection
Authentication Forms
\end_layout

\begin_layout Standard
The authentication service comes with a bunch of /web/fragments/ that you
 can easily drop in to any page.
 They handle things like logging in, logging out, and showing the currently
 logged-in user.
 </p>
\end_layout

\begin_layout Subsection
Providers
\end_layout

\begin_layout Standard
Using Savory's plug-ins library, the authentication service adds transparent
 support for 3rd-party authentication providers.
 Currently supported providers are Facebook, Windows Live, Twitter and OpenID
 (tested with Google, Yahoo, Myspace, LiveJournal).
\end_layout

\begin_layout Standard
Users coming from outside are real users: the first time they log in, a
 user document is created for them in the collection, and it can join in
 with settings, permissions, etc.
 Depending on how your application works, you can treat these users as any
 other user, or use the authorization service to treat them as 
\begin_inset Quotes eld
\end_inset

guests
\begin_inset Quotes erd
\end_inset

 with the ability to do only certain tasks.
 All 3rd-party users are automatically associated with an authorization
 group named after their provider.
 So, you can grant special permissions (or deny permissions) to 
\begin_inset Quotes eld
\end_inset

facebook.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
This useful feature allows your application to be especially welcoming.
 Studies have shown that typical users think twice when a site requires
 <a href="../../feature/registration/">registration</a>.
 People either don't want to invest the effort in registering, or are anxious
 about yet another copy of their personal data being stored in somebody's
 database.
\end_layout

\begin_layout Section
Authorization Service
\end_layout

\begin_layout Standard
When used with the <a href="../authentication/">authentication service</a>,
 this service lets you secure your site by allowing only authorized users
 to access certain resources or perform certain operations.
\end_layout

\begin_layout Subsubsection
Entities and Inheritance
\end_layout

\begin_layout Standard
Permissions are associated with 
\begin_inset Quotes eld
\end_inset

entities,
\begin_inset Quotes erd
\end_inset

 which could be either individual users (from the <a href="../authentication/">aut
hentication service</a>), or groups, which are here stores in a simple MongoDB
 collection.
\end_layout

\begin_layout Standard
Each entity can inherit permissions from any number of other entities, in
 order.
 The common use case is for a user to 
\begin_inset Quotes eld
\end_inset

belong
\begin_inset Quotes erd
\end_inset

 to a few groups, and inherit their permissions.
 This lets you centrally manage permissions for large groups of users, and
 easily change a user's permission profile by changing their groups.
 Entities can inherit from other entities, and so on.
\end_layout

\begin_layout Standard
Permissions will be overriden by the inheritor: for example, if you specifically
 grant a user permission to edit a certain page, they will have this permission
 even if the group they inherit from specifically forbids it.
 The order of inheritance also allows for overriding.
\end_layout

\begin_layout Subsubsection
Cascading Permissions
\end_layout

\begin_layout Standard
The common practice is to name permissions using a hierarchical dot notation,
 with each level of depth corresponding to moving into a specific section,
 resource or operation in your application.
 In some cases, it may make sense to treat a permission as if it covers
 all sub-permissions in a hierarchy.
 Here we call this 
\begin_inset Quotes eld
\end_inset

cascading permissions.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Section
Backup Service
\end_layout

\begin_layout Standard
Let's you do a live export of your MongoDB databases and collections to
 JSON, optionally gzipping the output to save space.
 You can set up your application's crontab to have the backup run regularly.
\end_layout

\begin_layout Standard
Backups are very, very fast: even very large databases can be fully exported
 in durations measured in seconds or minutes.
\end_layout

\begin_layout Subsection
Why Not Use MongoDB's mongodump or mongoexport Tools?
\end_layout

\begin_layout Standard
From our experience, the admin tools that come with MongoDB are overly simplisti
c and unreliable.
\end_layout

\begin_layout Itemize
Otherwise, Savory's backup service offers the following advantages:
\end_layout

\begin_layout Itemize
Thoughput: Because we're using the Java MongoDB driver underneath, with
 its support for connection pooling, we can achieve much higher througput
 than the command line tools, which use a single connection.
 The default is to use 5 threads (and thus 5 connection at most) at once.
\end_layout

\begin_layout Itemize
True JSON: The mongoexport tool does not export a real JSON array, instead
 it exports each document as a JSON dict, separating each document with
 a newline.
 Savory exports a standard JSON array, readable from any standard JSON parser.
\end_layout

\begin_layout Itemize
Consistency: Works with the same MongoDB connection as your application,
 guaranteeing that you're backing up 
\emph on
exactly
\emph default
 the same data your application sees.
 This is especially important in a sharded or replica set deployment.
\end_layout

\begin_layout Itemize
Fully integrated: You don't have to create bash scripts to backup your DB.
 Instead, you can stay in JavaScript and Savory and your regular application
 code.
\end_layout

\begin_layout Itemize
Iterators: The backup service uses Savory <a href="../../foundation/iterators/">iter
ators</a>, so you can transform your data in various ways while backing
 up, or even include non-MongoDB data.
\end_layout

\begin_layout Section
Cache Service
\end_layout

\begin_layout Section
Documents Service
\end_layout

\begin_layout Section
Events Service
\end_layout

\begin_layout Standard
Every framework provides some generic way to send, listen to and fire one-way
 messages called 
\begin_inset Quotes eld
\end_inset

events.
\begin_inset Quotes erd
\end_inset

 By decoupling event producer code from event consumer code, you can better
 organize your code architecture.
\end_layout

\begin_layout Quote
\SpecialChar \ldots{}
Or not.
 The problem with events is that they are hooked up dynamically while the
 application runs.
 It's hard to know, simply looking at the code, what code will be triggered
 when an event is fired.
 Decoupling is a great way to introduce some really difficult bugs into
 your codebase.
 It's best not to use events if you don't actually need them!
\end_layout

\begin_layout Standard
Some frameworks go a step beyond simple code decoupling, and treat producers
 and consumers as separate 
\emph on
components
\emph default
, where the producer cannot make any assumptions on the consumer's thread
 behavior.
 For example, a consumer might respond to events immediately, in thread,
 possibly tying up the producer's thread in the process.
 Or, it might have events queues up, and poll occasionally to handle them.
 In such highly generic situations, events are called 
\begin_inset Quotes eld
\end_inset

messages,
\begin_inset Quotes erd
\end_inset

 and implementations often involve sophisticated middleware to queue messages,
 persist them, create inter-dependencies, and make sure they travel from
 source to destination via repeated attempts, back-off algorithms, notifications
 to system administrators, etc.
\end_layout

\begin_layout Standard
One size does not fit all.
 With Savory, we wanted to keep events lightweight: we assume that your
 consumer and producer components are all running inside a Prudence container:
 they are /resources/ and /web/dynamic/ documents that run in web request
 threads, or /tasks/ that run asynchronously.
 There's thus no need for generic middleware, though more sophisticated,
 dedicated messaging middleware is out there and available if you need it.
 (See 
\begin_inset CommandInset href
LatexCommand href
name "RabbitMQ"
target "http://www.rabbitmq.com/"

\end_inset

.)
\end_layout

\begin_layout Standard
On the other hand, the combination of Prudence Hazelcast clusters, MongoDB,
 and JavaScript's inherent dynamism within the Prudence container allows
 for some really scalable events! If what you need is asynchronicity and
 scalable distribution, rather than generic decoupling, then Savory events
 might be far more useful and simpler than deploying complex middleware.
\end_layout

\begin_layout Subsection
In-Thread Events
\end_layout

\begin_layout Standard
First, the basics.
 Here's our 
\begin_inset Quotes eld
\end_inset

/libraries/politeness/acknowledgements.js
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Savory.Events.subscribe({
\end_layout

\begin_layout Plain Layout

	name: 'payments.successful',
\end_layout

\begin_layout Plain Layout

	fn: function(name, context) {
\end_layout

\begin_layout Plain Layout

		logger.info('User {0} has paid us {1}!', context.username, context.amount)
\end_layout

\begin_layout Plain Layout

		Acknowledgements.sendThankYou(context.username)
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then, to fire the event, somewhere in our payments workflow:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

document.executeOnce('/libraries/politeness/acknowledgements/')
\end_layout

\begin_layout Plain Layout

Savory.Events.fire({
\end_layout

\begin_layout Plain Layout

	name: 'payments.successful',
\end_layout

\begin_layout Plain Layout

	context: {
\end_layout

\begin_layout Plain Layout

		username: user.name,
\end_layout

\begin_layout Plain Layout

		id: user.id,
\end_layout

\begin_layout Plain Layout

		amount: payment.amount
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For this to work, you have to make sure the firing code has already run
 the code that hooks up the listeners.
 Often, a simple document.execute will do the trick, like in this example.
\end_layout

\begin_layout Subsection
Asynchronous Events
\end_layout

\begin_layout Standard
You can easily make the listeners run outside your thread, in fact anywhere
 in your Prudence cluster:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Savory.Events.subscribe({
\end_layout

\begin_layout Plain Layout

	name: 'payments.successful',
\end_layout

\begin_layout Plain Layout

	dependencies: '/politeness/acknowledgements/',
\end_layout

\begin_layout Plain Layout

	fn: function(name, context) {
\end_layout

\begin_layout Plain Layout

		logger.info('User {0} has paid us {1}!', context.username, context.amount)
\end_layout

\begin_layout Plain Layout

		Acknowledgements.sendThankYou(context.username)
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that we added 
\begin_inset Quotes eld
\end_inset

dependencies
\begin_inset Quotes erd
\end_inset

 to the listener, to allow it to be called in different contexts.
 These dependencies are document.executeOnce'd to make sure the thread has
 access to all the code it needs.
\end_layout

\begin_layout Standard
Firing it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

document.executeOnce('/libraries/politeness/acknowledgements/')
\end_layout

\begin_layout Plain Layout

Savory.Events.fire({
\end_layout

\begin_layout Plain Layout

	name: 'payments.successful',
\end_layout

\begin_layout Plain Layout

	async: true,
\end_layout

\begin_layout Plain Layout

	context: {
\end_layout

\begin_layout Plain Layout

		username: user.name,
\end_layout

\begin_layout Plain Layout

		id: user.id,
\end_layout

\begin_layout Plain Layout

		amount: payment.amount
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And\SpecialChar \ldots{}
 that's pretty much it.
 Every listener will run in its own thread within the global pool.
 You can add a 
\begin_inset Quotes eld
\end_inset

distributed: true
\begin_inset Quotes erd
\end_inset

 flag to cause listeners to be executed anywhere in the cluster.
\end_layout

\begin_layout Standard
How does this magic work? It's JavaScript magic: 
\emph on
the listener function's source code is serialized
\emph default
.
 The code that fires the event is called via <a href="../tasks/">Savory's
 tasks library</a>.
 The task makes sure to run the dependencies and evaluate the JavaScript
 you stored.
 Voila.
 (Serialization and eval will only occur on async events: otherwise, it's
 a regular function call.)
\end_layout

\begin_layout Standard
Concerned about JavaScript eval performance? Generally, it's very fast,
 and surely whatever overhead is required to parse the JavaScript grammar
 would be less than any network I/O that a distributed event would involve.
 If you're really worried, make sure to store as little as possible in the
 listener function.
 It's best to just call a function from one of the dependency libraries,
 which are already compiled and at their most efficient.
\end_layout

\begin_layout Subsection
Stored Listeners
\end_layout

\begin_layout Standard
So far so good, but both examples above require you to execute the code
 that subcribes the listeners before firing the event.
 Stored listeners remove this requirement by saving the event and its listeners
 in one of several storage implementations.
\end_layout

\begin_layout Standard
For example, let's store our listeners in application.distributedGlobals,
 so that we can fire the event anywhere in the Prudence cluster:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var globalEvents = new Savory.Events.GlobalsStore(application.distributedGlobals,
 'myevents.')
\end_layout

\begin_layout Plain Layout

Savory.Events.subscribe({
\end_layout

\begin_layout Plain Layout

	name: 'payments.successful',
\end_layout

\begin_layout Plain Layout

	stores: globalEvents,
\end_layout

\begin_layout Plain Layout

	id: 'sendThankYou',
\end_layout

\begin_layout Plain Layout

	dependencies: '/politeness/acknowledgements/',
\end_layout

\begin_layout Plain Layout

	fn: function(name, context) {
\end_layout

\begin_layout Plain Layout

		logger.info('User {0} has paid us {1}!', context.username, context.amount)
\end_layout

\begin_layout Plain Layout

		Acknowledgements.sendThankYou(context.username)
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can also use application.globals or application.sharedGlobals.
\end_layout

\begin_layout Standard
One small issue is that with stored listeners is that they are inherently
 multithreaded: so, you need to make sure that they are not registered more
 than once, say by multiple nodes in the cluster, otherwise your listener
 code would be called multiple times.
\end_layout

\begin_layout Standard
That's what the listener 
\begin_inset Quotes eld
\end_inset

id
\begin_inset Quotes erd
\end_inset

 field is for.
 In fact, the 
\begin_inset Quotes eld
\end_inset

id
\begin_inset Quotes erd
\end_inset

 field can also be used for in-thread listeners.
 It also might make sense to set up all your stored listeners in your 
\begin_inset Quotes eld
\end_inset

/startup/
\begin_inset Quotes erd
\end_inset

 task, but it's not a requirement: you can install listeners whenever necessary
 and relevant.
\end_layout

\begin_layout Standard
Because it's stored, firing the event does not require us to execute the
 listener code first in our thread.
 We can remain blissfully unaware of who or what is subscribed to our event:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Savory.Events.fire({
\end_layout

\begin_layout Plain Layout

	name: 'payments.successful',
\end_layout

\begin_layout Plain Layout

	stores: globalEvents,
\end_layout

\begin_layout Plain Layout

	async: true,
\end_layout

\begin_layout Plain Layout

	distributed: true,
\end_layout

\begin_layout Plain Layout

	context: {
\end_layout

\begin_layout Plain Layout

		username: user.name,
\end_layout

\begin_layout Plain Layout

		id: user.id,
\end_layout

\begin_layout Plain Layout

		amount: payment.amount
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

stores
\begin_inset Quotes erd
\end_inset

 param can also be an array, so you can fire the event on listeners from
 various stores.
 The in-thread store is in 
\begin_inset Quotes eld
\end_inset

Savory.Events.defaultStores
\begin_inset Quotes erd
\end_inset

, so you can concat that to your custom store if you want to fire the event
 across all stores.
 Or, set 
\begin_inset Quotes eld
\end_inset

Savory.Events.defaultStore
\begin_inset Quotes erd
\end_inset

 to your own value.
\end_layout

\begin_layout Subsection
Persistent Listeners
\end_layout

\begin_layout Standard
In the above example, the listeners would have to be re-subscribed when
 the application restarts, because it cannot guaranteed that application.distribu
tedGlobals would keep its value.
 (Well, you 
\emph on
can
\emph default
 configure Hazelcast to persist the distributedGlobals map\SpecialChar \ldots{}
)
\end_layout

\begin_layout Standard
Let's store our listeners in MongoDB, instead (the default is to use the
 
\begin_inset Quotes eld
\end_inset

events
\begin_inset Quotes erd
\end_inset

 MongoDB collection):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Savory.Events.subscribe({
\end_layout

\begin_layout Plain Layout

	name: 'payments.successful',
\end_layout

\begin_layout Plain Layout

	stores: new Savory.Events.MongoDbCollectionStore(),
\end_layout

\begin_layout Plain Layout

	id: 'sendThankYou',
\end_layout

\begin_layout Plain Layout

	dependencies: '/politeness/acknowledgements/',
\end_layout

\begin_layout Plain Layout

	fn: function(name, context) {
\end_layout

\begin_layout Plain Layout

		logger.info('User {0} has paid us {1}!', context.username, context.amount)
\end_layout

\begin_layout Plain Layout

		Acknowledgements.sendThankYou(context.username)
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Everything is otherwise the same.
 Neat!
\end_layout

\begin_layout Standard
You can also store events inside a specific, arbitrary MongoDB document,
 using 
\begin_inset Quotes eld
\end_inset

Savory.Events.MongoDbDocumentStore
\begin_inset Quotes erd
\end_inset

.
 This is a great way to keep events and their listeners (and the namespace
 for events) localized to a specific object without adding external mechanisms
 and storage.
\end_layout

\begin_layout Standard
Finally, you can create your own custom store class to store events anywhere
 else.
\end_layout

\begin_layout Section
Internationalization Service
\end_layout

\begin_layout Section
Linkback Service
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Linkbacks
\begin_inset Quotes erd
\end_inset

 are a way to add cross-referencing to hyperlinks: if I link to another
 page on another site, I can let that other site know that I am linking
 to it, and then that other site can choose to display a link back to my
 site.
 This can be useful for users, as it lets them quickly find relevant sites.
 But, it's probably more important in terms of SEO: the more links you have,
 the higher your page's rank will be in search engines.
 And if you can get a link to your site on a popular site, all the better.
\end_layout

\begin_layout Standard
Because linkbacks require trust and mutuality, there are especially popular
 in the blogosphere, where bloggers often work with each other (sometimes
 antagonistically!) to create more hits, and thus generate more revenue.
\end_layout

\begin_layout Standard
Unfortunately, there's no single standard for linbacking, and all of them
 are rather cumbersome.
 Luckily, Savory does most of the work for you: it features clients and
 servers for both the 
\begin_inset CommandInset href
LatexCommand href
name "Trackback"
target "http://www.sixapart.com/pronet/docs/trackback_spec"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "Pingback"
target "http://www.hixie.ch/specs/pingback/pingback"

\end_inset

 specs.
 As a server, it lets you accept these linkbacks from other sites, respond
 properly to the remote clients, and register the linkback in a MongoDB
 collection.
 As a client, it lets you auto-discover trackback and pingback URLs on remote
 pages, and do the necessary handshaking.
\end_layout

\begin_layout Standard
Pingback is by far the more complicated spec: it requires XML-RPC (we are
 using Savory's RPC service for it), and also suggests that you make sure
 that the other site is indeed linking to you before registering.
 Trackback is more lightweight, but allows telling the target site more
 information about how you are linking them.
\end_layout

\begin_layout Subsection
Integrating Linkbacks into Your Product
\end_layout

\begin_layout Standard
Savory does a lot for you, but the burden is still on your to understand
 these non-trivial technologies well enough to integrate them properly into
 your application.
 On this page, we're featuring a rather elaborate example of how linkbacks
 work on this page for the purpose of demonstration.
 Much of this can be automated for your application: for example, in a blogging
 application, you might want to go over every new blog post and try out
 all the links on the page with Savory.Linkback.discover to see if they support
 linkbacks, and then to do the linkback automatically without any user interacti
on.
 Or, you might prefer to have users explicitly click on a 
\begin_inset Quotes eld
\end_inset

linkback
\begin_inset Quotes erd
\end_inset

 feature.
 Savory gives you the tools, making it as easy as possible for you to do
 the rest.
\end_layout

\begin_layout Subsection
How to Linkback 
\emph on
from
\emph default
 This Page?
\end_layout

\begin_layout Subsubsection
1.
 Link
\end_layout

\begin_layout Standard
First, we need to make sure that we actually have a link to the remote site
 on our page.
 Here's a really simple form that lets you add links to this page:
\end_layout

\begin_layout Standard
<form id="add" method="POST"> <p> <%= Savory.HTML.input({name: 'addPageUri',
 size: 70}, {_content: 'Page URL:'}) %> </p>
\end_layout

\begin_layout Standard
<p> <%= Savory.HTML.submit({value: 'Add Link'}) %> </p>
\end_layout

\begin_layout Standard
</form> <form id="clear" method="POST"> <input type="hidden" name="clearPageUris
" value="true" /> <p>
\end_layout

\begin_layout Standard
<%= Savory.HTML.submit({value: 'Clear Link List'}) %> </p> </form>
\end_layout

\begin_layout Standard
<p> Currently linked pages: <% for (var i = links.iterator(); i.hasNext();
 ) { var link = i.next(); %> <a href="<%= link %>">link</a> <% } %> </p>
\end_layout

\begin_layout Subsubsection
2.
 Auto-Discovery
\end_layout

\begin_layout Standard
We support auto-discovery of trackback and pingback URLs, so you can first
 try to just enter the linked URL.
 Make sure it's one of the links you've added above! Pingback will be preferred
 if both Trackback and Pingback are supported by page.
\end_layout

\begin_layout Standard
<form id="linkback" method="POST"> <p> <%= Savory.HTML.input({name: 'pageUri',
 size: 70}, {_content: 'Page URL:'}) %> </p> <h3>3.
 Or Use Explicit Linkback URLs</h3> <p> In case that doesn't work, you might
 also have to enter an explicit trackback or pingback URL posted on that
 page: </p>
\end_layout

\begin_layout Standard
<p> <%= Savory.HTML.input({name: 'trackbackUri', size: 70}, {_content: 'Trackback
 URL:'}) %> </p> <p> (Note that you do <i>not</i> need to enter the page
 URL with trackback, but you <i>do</i> need it it with pingback) </p> <p>
 <%= Savory.HTML.input({name: 'pingbackUri', size: 70}, {_content: 'Pingback
 URL:'}) %> </p>
\end_layout

\begin_layout Standard
<p> <%= Savory.HTML.submit({value: 'Linkback'}) %> </p> </form> <% if (message)
 { %>
\end_layout

\begin_layout Standard
<p> <span style="color: red;"><%= message %></span> </p> <% } %>
\end_layout

\begin_layout Subsection
How to Linkback 
\emph on
to
\emph default
 This Page?
\end_layout

\begin_layout Standard
This page contains information about its trackback and pingback URLs.
 In case your software doesn't support auto-discovery of these, and you
 need to enter them explicitly, they are:
\end_layout

\begin_layout Standard
<p> <%= Savory.HTML.input({value: Savory.Linkback.getTrackbackUri(conversation.refere
nce), readonly: 'readonly', size: 70}, {_content: 'Trackback URL:'}) %>
 </p> <p> <%= Savory.HTML.input({value: Savory.Linkback.getPingbackUri(), readonly:
 'readonly', size: 70}, {_content: 'Pingback URL:'}) %> </p> 
\end_layout

\begin_layout Section
Nonces Service
\end_layout

\begin_layout Section
Notification Service
\end_layout

\begin_layout Standard
This awesome service can handle all the notices coming out of your application,
 whether by email, stored in a MongoDB 
\begin_inset Quotes eld
\end_inset

inbox,
\begin_inset Quotes erd
\end_inset

 or via your own pluggable delivery mechanism.
\end_layout

\begin_layout Standard
To handle very large scales, it works by first having you queue new notices
 (in MongoDB), and then it sends them asynchronously (via /tasks/ configured
 in crontab) to the addressees.
 Notifications sent to millions of users can be queued just once, on a 
\begin_inset Quotes eld
\end_inset

channel,
\begin_inset Quotes erd
\end_inset

 which individual users can 
\begin_inset Quotes eld
\end_inset

subscribe
\begin_inset Quotes erd
\end_inset

 to.
 It's essentially a subscription system, though it also handles individually
 sent notices, to known users or even to on-the-fly addressees.
 
\end_layout

\begin_layout Subsection
Digests
\end_layout

\begin_layout Section
Progress Service
\end_layout

\begin_layout Standard
If you've read Prudence's <a href="http://threecrickets.com/prudence/scaling/">Sc
aling Tips</a> article, you know that for potentially long-running tasks
 you want to release conversation threads as soon as possible, and notify
 the user in some way as to when the task is finished.
 This service helps you do it.
\end_layout

\begin_layout Standard
For a use case example, consider an application that searches for flight
 information using several off-site databases and services.
 The search can take many seconds, if not minutes! Of course, you do not
 want to hold up a user thread and have the browser spin while the search
 is going on, so you turn to Savory's processing service.
\end_layout

\begin_layout Standard
It works like this: you create a 
\begin_inset Quotes eld
\end_inset

process,
\begin_inset Quotes erd
\end_inset

 which is a MongoDB document, and you can asynchronously update 
\begin_inset Quotes eld
\end_inset

milestones
\begin_inset Quotes erd
\end_inset

 in it, including marking it as done.
 Processes can be associated with a user, which allows you to use the <a
 href="../authorization/">authorization service</a> to allow only that user
 access to the process' status, and also to allow the user to query all
 processes associated with them.
\end_layout

\begin_layout Standard
The service supports two ways of letting the user know the status of the
 process.
 The first is for short-term processes: a /web/fragments/ drop-in that simply
 shows the current status of the process, and uses browser JavaScript to
 refresh the page every few seconds.
 The user would see milestones along the way to completion, if there are
 any, and eventually be redirected to another page when the process completes
 (or fails!).
\end_layout

\begin_layout Standard
For longer running processes, you cannot expect the user to wait in front
 of their web browsers.
 In these cases, the processing service uses the <a href="../notification/">notifi
cation service</a> to notify the user about changes to the process.
 Additionally, there is a /web/fragments/ drop-in that would allow the user
 to see the current state of the process on the web, and another one that
 lets the user access all processes associated with them.
\end_layout

\begin_layout Subsection
Trivial Example
\end_layout

\begin_layout Standard
This fake process will simply do nothing until its expiration:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

document.executeOnce('/savory/service/processing/')
\end_layout

\begin_layout Plain Layout

var process = Savory.Progress.startProcess({
\end_layout

\begin_layout Plain Layout

	description: 'Waiting for this fake process to expire...',
\end_layout

\begin_layout Plain Layout

	maxDuration: 20 * 1000,
\end_layout

\begin_layout Plain Layout

	redirect: conversation.reference
\end_layout

\begin_layout Plain Layout

})
\end_layout

\begin_layout Plain Layout

process.redirectWait(conversation)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That final redirectWait call will send the user to a 
\begin_inset Quotes eld
\end_inset

please wait
\begin_inset Quotes erd
\end_inset

 page which will show 
\begin_inset Quotes eld
\end_inset

Searching for your flights\SpecialChar \ldots{}

\begin_inset Quotes erd
\end_inset

 as the text, and have a progress bar.
 The page will automatically refresh and show ongoing progress.
 After 20 seconds of this, it will redirect back to this page.
 Note that you can specify different redirect URIs for success, error, timeouts,
 etc.
\end_layout

\begin_layout Subsection
Example with Milestones
\end_layout

\begin_layout Standard
You can launch a task, via the Tasks.task API, at the same time as you start
 a process.
 Conveniently, you can then access the process via the task context:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var searchString = 'flight #1234' 
\end_layout

\begin_layout Plain Layout

var process = Savory.Progress.startProcess({
\end_layout

\begin_layout Plain Layout

	description: 'Searching for your flights...',
\end_layout

\begin_layout Plain Layout

	maxDuration: 60 * 1000,
\end_layout

\begin_layout Plain Layout

	redirect: '/flight/results/',
\end_layout

\begin_layout Plain Layout

	task: {
\end_layout

\begin_layout Plain Layout

		name: '/flight/search/',
\end_layout

\begin_layout Plain Layout

		searchString: searchString, // this is our custom field
\end_layout

\begin_layout Plain Layout

		distributed: true
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Our 
\begin_inset Quotes eld
\end_inset

/tasks/flights/search.js
\begin_inset Quotes erd
\end_inset

 would look like this: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

document.executeOnce('/savory/service/processing/')
\end_layout

\begin_layout Plain Layout

var process = Savory.Progress.getProcess()
\end_layout

\begin_layout Plain Layout

if (process && process.isActive()) {
\end_layout

\begin_layout Plain Layout

	var task = process.getContext()['savory.task']
\end_layout

\begin_layout Plain Layout

	var milestone = process.getLastMilestone()
\end_layout

\begin_layout Plain Layout

	switch (milestone.name) {
\end_layout

\begin_layout Plain Layout

		case 'started':
\end_layout

\begin_layout Plain Layout

			process.addMilestone({name: 'ours', description: 'Searching our flight
 database'})
\end_layout

\begin_layout Plain Layout

			var found = searchOurDatabase(task.searchString)
\end_layout

\begin_layout Plain Layout

			if (found) {
\end_layout

\begin_layout Plain Layout

				process.addMilestone({name: 'done'})
\end_layout

\begin_layout Plain Layout

			} else {
\end_layout

\begin_layout Plain Layout

				Tasks.task(task)
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			break 
\end_layout

\begin_layout Plain Layout

		case 'ours':
\end_layout

\begin_layout Plain Layout

			process.addMilestone({name: 'partners', description: 'Searching our partner
 databases'}
\end_layout

\begin_layout Plain Layout

			var found = searchPartnerDatabases(task.searchString)
\end_layout

\begin_layout Plain Layout

			if (found) {
\end_layout

\begin_layout Plain Layout

				process.addMilestone({name: 'done'})
\end_layout

\begin_layout Plain Layout

			} else {
\end_layout

\begin_layout Plain Layout

				process.addMilestone({name: 'failed'})
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			break
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that we've handled each milestone as a new execution of the task (the
 first milestone is always 
\begin_inset Quotes eld
\end_inset

started
\begin_inset Quotes erd
\end_inset

).
 This allows for better concurrency (the task is distributed, too, so each
 milestone might be executed on a different instance in the cluster), and
 also makes sure that a milestone is not performed if the process expires
 and is thus not longer active (isActive would return false).
\end_layout

\begin_layout Subsection
Reattempts
\end_layout

\begin_layout Standard
A common use case for the processing service is in dealing with an unreliable
 action that might actually succeed after a few attempts.
 You'd thus want to let the user wait until a certain maximum duration,
 and keep retrying every few seconds in the background until the action
 succeeds.
\end_layout

\begin_layout Standard
The processing service automates much of this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var ipAddressOfRemoteLocation = '1.2.3.4'
\end_layout

\begin_layout Plain Layout

var process = Savory.Progress.startProcess({
\end_layout

\begin_layout Plain Layout

	description: 'Attemping to connect you to remote location {0}...'.cast(ipAddressOfR
emoteLocation),
\end_layout

\begin_layout Plain Layout

	maxDuration: 5 * 60 * 1000,
\end_layout

\begin_layout Plain Layout

	redirect: '/remote/connected/',
\end_layout

\begin_layout Plain Layout

	task: {
\end_layout

\begin_layout Plain Layout

		fn: '/remote/connect/',
\end_layout

\begin_layout Plain Layout

		maxAttempts: 50,
\end_layout

\begin_layout Plain Layout

		delay: 5000,
\end_layout

\begin_layout Plain Layout

		remoteLocation: ipAddressOfRemoteLocation // this is our custom field
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Our 
\begin_inset Quotes eld
\end_inset

/tasks/remote/connect.js
\begin_inset Quotes erd
\end_inset

 would look something like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

document.executeOnce('/savory/service/processing/')
\end_layout

\begin_layout Plain Layout

var process = Savory.Progress.getProcess()
\end_layout

\begin_layout Plain Layout

if (process) {
\end_layout

\begin_layout Plain Layout

	process.attempt(function(process, task) {
\end_layout

\begin_layout Plain Layout

		document.executeOnce('/mylibrary/connections/')
\end_layout

\begin_layout Plain Layout

		return connectRemote(task.remoteLocation)
\end_layout

\begin_layout Plain Layout

	})
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The process.attempt call doest most of the work: it makes sure to call the
 task again if there's still time before the process expires and the maximum
 number of attempts has not been exceeded, waiting the appropriate delay
 before each attempt.
 Your function just has to make sure to return true if the attempt has succeeded.
 Easy!
\end_layout

\begin_layout Section
REST Service
\end_layout

\begin_layout Section
RPC Service
\end_layout

\begin_layout Section
Search Service
\end_layout

\begin_layout Section
Serials Service
\end_layout

\begin_layout Section
Syndication Service
\end_layout

\begin_layout Subsection
Links
\end_layout

\begin_layout Standard
The module contains a simple /web/fragments/ drop-in that adds links recognizes
 by all major browsers, and another drop-in for the 
\begin_inset Quotes eld
\end_inset

syndication
\begin_inset Quotes erd
\end_inset

 button, using the 
\emph on
de facto
\emph default
 standard icon.
\end_layout

\begin_layout Section
Gravatar Integration
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Gravatar"
target "http://en.gravatar.com/"

\end_inset

 is a popular service for managing user avatars and simple profile pages
 by associating them with email addresses.
\end_layout

\begin_layout Standard
It makes users happy, because they can manage their avatars for many, many
 services in one place.
 The user's email is hashed so that it is not made publicly available, unless
 the user chooses to put them explicitly on their profile.
\end_layout

\begin_layout Standard
It makes site owners happy, because they can display avatars for users without
 having to store them or otherwise manage them.
 Additionally, new users would have their avatar immediately displayed without
 any effort on their part, and users do not like effort.
 If you're using the <a href="../../service/authentication/">Authentication
 Module</a> in association with the <a href="../../feature/registration/">Registrati
on Module</a>, then you already have an email address for the user, and
 can immediately fetch their avatar from Gravatar.
\end_layout

\begin_layout Standard
Worried about forcing users to use an external service? Then make Gravatar
 an optional fallback.
 Provide users with a way to manage avatars on your site directly, and only
 default to Gravatar.
\end_layout

\begin_layout Subsection
Let's Do It
\end_layout

\begin_layout Standard
Just enter an email address, and let the Savory magic happen.
\end_layout

\begin_layout Standard
The avatar above is hyperlinked to their Gravatar profile page.
 And here's the complete JSON dump of their profile:
\end_layout

\begin_layout Section
PayPal Integration
\end_layout

\begin_layout Section
Ext JS and Sencha Touch Integration
\end_layout

\begin_layout Section
Blog Feature
\end_layout

\begin_layout Section
Console Feature
\end_layout

\begin_layout Section
Contact Us Feature
\end_layout

\begin_layout Standard
This simple feature contains a /web/fragment/ that displays an HTML form
 with a CAPTCHA that allows users to send a message on a specific <a href="../../ser
vice/notification/">notification service</a> channel.
 System administrators or others subscribing to the channel would then receive
 it.
 Straightforward!
\end_layout

\begin_layout Standard
Note that a different form is displayed depending on whether the user is
 logged in.
 Logged-in users will not have to enter their email address or pass the
 CAPTCHA.
 We already know they are legit, by virtue of having logged in!
\end_layout

\begin_layout Standard
The originating IP address is included in the email.
\end_layout

\begin_layout Section
Discussion Feature
\end_layout

\begin_layout Subsection
Editable Graph Structures in MongoDB
\end_layout

\begin_layout Standard
If you'll take a look at Savory's Ext JS tree integration, you'll see it's
 pretty neat.
 But it was literally neat because the trees for Ext-JS are immutable, and
 easily stored in a MongoDB document, which can hold a structure of arbitrary
 depth.
 However, if you want your tree to change, though, by multiple users and
 threads -- document databases such as MongoDB begin to show some of their
 limitations.
 (Graph databases, such as neo4j, are of course perfect for this use case.)
\end_layout

\begin_layout Standard
Nevertheless, it's not impossible, and can get excellent all-around performance.
\end_layout

\begin_layout Standard
How is this solved for the Discussion Feature? First off, what it does is
 let you attach a 
\begin_inset Quotes eld
\end_inset

forum
\begin_inset Quotes erd
\end_inset

 to any MongoDB document.
 It could thus be a Page from the Wiki Feature, a blog post, or just anything
 in your application.
 Of course, permissions apply, and you can allow, for example, for registered
 users to post new threads and have 
\begin_inset Quotes eld
\end_inset

visitor
\begin_inset Quotes erd
\end_inset

 users (Facebook, Twitter, etc.) only the right to comment.
 The discussion is threaded, in that comments can have any level of depth.
 It's very easy to drop in, and makes a lot of web application features
 instantly sociable.
\end_layout

\begin_layout Standard
MongoDB's atomic operations do not support such recursion, so we needed
 a different method.
 You can see ideas on the MongoDB 
\begin_inset CommandInset href
LatexCommand href
name "trees page"
target "http://www.mongodb.org/display/DOCS/Trees+in+MongoDB"

\end_inset

.
\end_layout

\begin_layout Standard
After some consideration, we used a variation of the 
\begin_inset Quotes eld
\end_inset

materialized paths
\begin_inset Quotes erd
\end_inset

 pattern.
 We have the forum posts stored as plain array, with each having a path
 as well as a parent field.
 We parse this document on load, to give it a tree-like structure more amenable
 to work with.
 The flat storage structure, however, allows for easy use of MongoDB's update
 operation.
 For each post, I store a 
\begin_inset Quotes eld
\end_inset

nextResponse
\begin_inset Quotes erd
\end_inset

 running serial.
 I update it atomically with $inc for each new post, to make sure it's unique,
 and append that number to the parent's path to create the new path.
 I then add the new response using MongoDB's $push.
 The result is that any number of users can respond at the same time to
 the same forum, and each response takes only two MongoDB write operations,
 only one of which waits for the response.
\end_layout

\begin_layout Standard
A graph DB would do this better, but the real comparison would be to a relationa
l database.
 Just two writes, but the whole forum is read with one read.
 I think this counts as a smashing success of an implementation.
\end_layout

\begin_layout Standard
You'll notice a rule of thumb we've applied here: if in relational database
 you always want your tables to be normalized, in document databases your
 goal is to use as few documents as possible.
 In this case, the entire forum is embedded into one document (together
 with the document's other data, if there is any).
 The document limit in MongoDB is 4MB, easily adequate for comments.
 But what if you want a more open forum? Well, the Discussion Module also
 comes with forum implementations that store each thread in post in its
 own document, or even each post in its own document.
 All use the same API.
 Mix and match for the best performance and growth necessity suitable for
 your needs.
\end_layout

\begin_layout Section
Registration Feature
\end_layout

\begin_layout Standard
This complement to the <a href="../../service/authentication/">authentication
 service</a> uses a two-step process to allow new users to register to your
 application.
 As is common, it expects users to have a personal email address, which
 will be used to both confirm the identity of the user and to communicate
 with the user when they are not logged in.
\end_layout

\begin_layout Standard
The feature contains a /web/fragment/ HTML form with a CAPTCHA, which collects
 the user's email, username, password and possibly some personal information.
 The form will be valid only of the username is not already in use.
\end_layout

\begin_layout Standard
If the form is valid, the user is created but not yet activated.
 An email is sent to the user with a unique, impossible-to-guess URL, which
 can be used only once.
 If they click on that link, the user is activated.
\end_layout

\begin_layout Standard
The feature allows for not-yet-activated users to be automatically deleted
 after a certain time.
 This would release the username for others to use.
\end_layout

\begin_layout Section
SEO Feature
\end_layout

\begin_layout Standard
This feature helps you comply with a few 
\emph on
de facto
\emph default
 search engine standards to improve your interaction with them, specifically
 robots.txt and sitemap.xml.
\end_layout

\begin_layout Standard
At first glance, there's nothing very sophisticated about these standards,
 and you might be tempted to create the required text files manually and
 then serve them statically.
 However, large applications with many URLs can easily have unwieldy site
 maps.
 This Savory feature helps you create them and manage them fairly automatically.
 It supports 
\emph on
very, very
\emph default
 large site maps.
\end_layout

\begin_layout Subsection
The Goods
\end_layout

\begin_layout Subsubsection
robots.txt
\end_layout

\begin_layout Standard
Search engines expect to find this resource right at the root of your domain.
 Its 
\begin_inset CommandInset href
LatexCommand href
name "plain text content"
target "http://www.robotstxt.org/robotstxt.html"

\end_inset

 tells them where to find your sitemap URL, and can also control the crawling
 of your domain.
\end_layout

\begin_layout Standard
Your robots.txt will likely not be very dynamic.
 Because it matches URLs starting with stated URLs, it can easily cover
 large sections of your site, and require infrequent tweaking.
\end_layout

\begin_layout Standard
When would you need a lot of robots.txt tweaking? A common case for large
 sites is that public resources are deprecated or otherwise cancelled.
 In such cases you still want to keep them up for reference, and to allow
 hyperlinks elsewhere on the web to still be able to reach them---there's
 SEO value in that.
 But, you do not want these resources to appear in search engines and confuse
 users (you want them to find the new, better resources).
 A robots.txt exclusion would do the trick.
\end_layout

\begin_layout Subsubsection
sitemap.xml
\end_layout

\begin_layout Standard
If your robots.txt doesn't state otherwise, then this resource will also
 be at the root of your domain.
 Its 
\begin_inset CommandInset href
LatexCommand href
name "XML content"
target "http://sitemaps.org/protocol.php"

\end_inset

 can either list URLs directly, or, more commonly, act as the primary index
 of other XML files called URL sets.
\end_layout

\begin_layout Standard
Search engines do take site maps seriously.
 A carefully maintained site map would help them keep up to date with your
 dynamic site, in turn helping to get human searchers to the page they want
 (or the page you want them to want\SpecialChar \ldots{}
).
 It's likely this would indirectly and directly improve your ranking, too.
\end_layout

\begin_layout Subsection
Dynamic or Static?
\end_layout

\begin_layout Standard
URL sets can grow to be very large (think: Wikipedia), so search engines
 have put limits on file size: 50,000 URLs per file and 10MB, uncompressed.
 That's right, you're allowed to compress your site map files with gzip
 to save bandwidth.
 There doesn't seem to be a limit on the number of files you can serve,
 so potentially your site map can be as big as needed.
\end_layout

\begin_layout Standard
Savory supports two ways of generating site map resources: dynamic (via
 /web/fragments/) and static (via /web/static/).
 Dynamic is the default, and should be fine for small web sites.
 It generates robots.txt and sitemap.xml on demand, using Prudence's standard
 caching to keep things smooth and fast.
\end_layout

\begin_layout Standard
But, dynamic mode does not support more than 50,000 URLs per URL set.
 What's more, it generates these within the HTTP request thread.
 So, you definitely do not want to use dynamic mode for large sites, or
 sites which are slow to generate the URL sets! If you do, each time you
 get hit by a search engine for the site map (can happen several times a
 day for 
\begin_inset Quotes eld
\end_inset

hot
\begin_inset Quotes erd
\end_inset

 sites!) a web request thread will be tied up for the length of time it
 takes to generate the huge URL set.
 There are two problems for this: first and worst, the search engine may
 penalize you for being so slow, and second, even if you are caching aggressivel
y, it means that you will occasionally have one 
\emph on
very
\emph default
 heavy request, breaking the ironclad rules laid out in Prudence's <a href="http
://threecrickets.com/prudence/scaling/">Scaling Tips</a> article.
\end_layout

\begin_layout Standard
Static mode can support URL sets of any size: it works by generating all
 required files in an asynchronous Prudence task so that they can take as
 much time as necessary, without tying up any user thread.
 You can set the task to run via Prudence's crontab: once a day, twice a
 day, etc.
 The task makes sure to split URL sets into 
\begin_inset Quotes eld
\end_inset

pages
\begin_inset Quotes erd
\end_inset

 of 50,000 URLs max, and to gzip compress them.
 It even makes sure to generate them in a separate spool directory, and
 then swap them all at once, so that search engines hitting your site exactly
 during site map generation don't see a partial, inconsistent picture.
 And it all happens asynchronously, using Savory tasks, so that multiple
 URL sets can be generated simultaneously.
 And, of course, since they are plain old files, you can also host them
 outside of Prudence.
\end_layout

\begin_layout Standard
Note that robots.txt is always generated dynamically: its size limit is 100KB,
 which should be manageable.
 The implication is that you can't go crazy with very large lists of exclusions/
inclusions.
 If this is an issue, you can use 
\begin_inset CommandInset href
LatexCommand href
name "meta tags"
target "http://www.robotstxt.org/meta.html"

\end_inset

 instead.
\end_layout

\begin_layout Subsection
Instruction Manual
\end_layout

\begin_layout Standard
Every application in your Prudence instance can have its own URL sets, but
 it only makes sense for the root application to have both robots.txt and
 sitemap.xml.
 We'll start our guide with an application that is 
\emph on
not
\emph default
 the at root, because it's simpler.
\end_layout

\begin_layout Standard
From our settings.js:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

predefinedGlobals = Sincerity.Objects.flatten({
\end_layout

\begin_layout Plain Layout

	savory: {
\end_layout

\begin_layout Plain Layout

		feature: {
\end_layout

\begin_layout Plain Layout

			seo: {
\end_layout

\begin_layout Plain Layout

				domains: [{
\end_layout

\begin_layout Plain Layout

					rootUri: 'http://localhost:8080'
\end_layout

\begin_layout Plain Layout

				}, {
\end_layout

\begin_layout Plain Layout

					rootUri: 'http://threecrickets.com'
\end_layout

\begin_layout Plain Layout

				}],
\end_layout

\begin_layout Plain Layout

				locations: [{
\end_layout

\begin_layout Plain Layout

					name: 'the-real-thing',
\end_layout

\begin_layout Plain Layout

					domains: ['http://localhost:8080', 'http://threecrickets.com'],
\end_layout

\begin_layout Plain Layout

					locations: ['/happy/', '/this/', '/is/', '/working/'],
\end_layout

\begin_layout Plain Layout

					exclusions: ['/savory/media/', '/savory/style/', '/savory/script/'],
\end_layout

\begin_layout Plain Layout

					inclusions: ['/savory/media/name/'],
\end_layout

\begin_layout Plain Layout

					factory: 'Explicit'
\end_layout

\begin_layout Plain Layout

				}, {
\end_layout

\begin_layout Plain Layout

					name: 'test',
\end_layout

\begin_layout Plain Layout

					domains: ['http://localhost:8080'],
\end_layout

\begin_layout Plain Layout

					factory: 'Fake',
\end_layout

\begin_layout Plain Layout

					dependency: '/about/feature/seo/fake-locations/'
\end_layout

\begin_layout Plain Layout

				}]
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the two arrays: domains and locations.
 There is a many-to-many connection between them, such your application
 can support many domains, many location groups, and apply different locations
 groups to different domains.
 This is because Prudence allows for multiple virtual hosting, so that each
 application may very well be running on different domains at the same time,
 and may want to present itself differently to search engines on each domain.
\end_layout

\begin_layout Standard
If you don't need to support virtual hosting, ignore the domains array and
 domains parameters: it will be assumed that your locations are to be applied
 to all domains.
 </p> <p> You then route the SEO resources for the application in its routing.js:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

document.executeOnce('/savory/feature/seo/')
\end_layout

\begin_layout Plain Layout

Savory.SEO.routing()
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Locations
\end_layout

\begin_layout Standard
Locations are configured using Savory's plug-in library, which uses the
 factory pattern to generate plug-ins.
 In our first locations config, we used the 
\begin_inset Quotes eld
\end_inset

Explicit
\begin_inset Quotes erd
\end_inset

 factory, which is built-in to the SEO feature.
 This lets use explicitly list our locations as arrays within the config.
 Obviously, this is useful only for very small sites with a known list of
 URLs.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

name
\begin_inset Quotes erd
\end_inset

 field is important: this becomes exactly the name of the URL set as it
 appears in the site map.
 As for exclusions and inclusions: they are lumped into robots.txt.
\end_layout

\begin_layout Standard
More interesting is our second locations config: it uses our own factory,
 which we called 
\begin_inset Quotes eld
\end_inset

Fake
\begin_inset Quotes erd
\end_inset

.
 This factory generates lots and lots (300,000) fake locations, and is useful
 for testing out very large site maps.
 (Bottom line: it takes about 7 seconds to generate the complete, gzip-compresse
d 7-page site map for that many URLs.) It's also a good example for you to
 use to create your own location factories.
\end_layout

\begin_layout Standard
The key to factory success is understanding the <a href="../../foundation/iterators/
">Savory iterators library</a>: as long as you keep your iterator properly
 fed, you should be able to scale to site maps of scary sizes.
\end_layout

\begin_layout Standard
One more thing to note is that each locations config will be executed simultaneo
usly on its own tasks thread, and this is true for all locations configs
 on all applications which you include in your root application, as detailed
 below.
\end_layout

\begin_layout Subsubsection
The Root Application
\end_layout

\begin_layout Standard
At minimum, the settings.js of the root application should look something
 like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

predefinedGlobals = Sincerity.Objects.flatten({
\end_layout

\begin_layout Plain Layout

	savory: {
\end_layout

\begin_layout Plain Layout

		feature: {
\end_layout

\begin_layout Plain Layout

			seo: {
\end_layout

\begin_layout Plain Layout

				domains: [{
\end_layout

\begin_layout Plain Layout

					rootUri: 'http://localhost:8080',
\end_layout

\begin_layout Plain Layout

					applications: [{
\end_layout

\begin_layout Plain Layout

						name: 'My Application',
\end_layout

\begin_layout Plain Layout

						internalName: 'myapp'
\end_layout

\begin_layout Plain Layout

					}],
\end_layout

\begin_layout Plain Layout

					delaySeconds: 100,
\end_layout

\begin_layout Plain Layout

					dynamic: false,
\end_layout

\begin_layout Plain Layout

					staticRelativePath: 'sitemap-local',
\end_layout

\begin_layout Plain Layout

					workRelativePath: 'sitemap-local'
\end_layout

\begin_layout Plain Layout

				}]
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You'll see that we added a few more fields to our domain config: beyond
 the root URI, we are also configuring our robots.txt here, which we will
 be hosting, and configuring the paths to use for static generation.
 The static path is relative to the application's /web/static/ directory,
 while the work path will be under your application's root directory's 
\begin_inset Quotes eld
\end_inset

work
\begin_inset Quotes erd
\end_inset

 subdirectory.
 Alternatively, you can use 
\begin_inset Quotes eld
\end_inset

staticPath
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

workPath
\begin_inset Quotes erd
\end_inset

 to provide absolute paths.
 For example, you might prefer to use 
\begin_inset Quotes eld
\end_inset

workPath: '/tmp/sitemap'
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Note that these paths are per domain: if you hosting multiple domains via
 virtual hosting, each site map should go to a different path.
 Via a simple <a href="http://threecrickets.com/prudence/manual/handlers/#filters
">capturing filter</a> we make sure that each domain gets it correct site
 map.
 Thus, the outside world doesn't actually see these static subdirectories:
 the URI space for the site map all appears, publicly, at the root.
\end_layout

\begin_layout Standard
The truly magical field is 
\begin_inset Quotes eld
\end_inset

applications
\begin_inset Quotes erd
\end_inset

: this is an array of application names for which locations will be added
 to this domain.
 The URL sets for each application for this will be merged into the main
 site map, and its exclusions/inclusions will be merged into robots.txt.
 It's up to you to make sure that URL set names from all applications don't
 overlap, since their files are all moved into the same static directory.
\end_layout

\begin_layout Standard
The root application can also have its own 
\begin_inset Quotes eld
\end_inset

locations
\begin_inset Quotes erd
\end_inset

 field, which will also be merged in.
 We omitted it in this example for simplicity.
\end_layout

\begin_layout Standard
To have your site map generated regularly, put something like the following
 in your <a href="http://threecrickets.com/prudence/manual/tasks/#toc-Subsection-
54">application's crontab</a> (as a single line).
 In this example, we're having our site map generator run every day at 4:00AM:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

0 4 * * * /savory/eval/ document.executeOnce('/savory/feature/seo/'); SEO.getDomai
n('http://localhost:8080').generateStatic();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You then route the SEO resources for the root application in its routing.js:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

document.executeOnce('/savory/feature/seo/')
\end_layout

\begin_layout Plain Layout

Savory.SEO.routing(true)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Well, one tiny little convenience here: though you do need to install the
 routes in your root application, you are free to host the SEO resources
 on another app (works via the magic of Prudence's <a href="http://threecrickets.
com/prudence/manual/routing/#toc-Subsubsection-100">router.captureOther</a>).
 So, we can call SEO.install(true, 'myapp').
\end_layout

\begin_layout Standard
\SpecialChar \ldots{}
And do all of the SEO stuff on myapp, even though it's not at root.
 The root application really doesn't have to do anything else.
\end_layout

\begin_layout Standard
Optionally, you can also <a href="http://threecrickets.com/prudence/manual/static
-web/#toc-Subsection-55">register the 
\begin_inset Quotes eld
\end_inset

.gz
\begin_inset Quotes erd
\end_inset

 extension</a> to serve the gzip MIME type.
 Search engines would not really care, but it makes your URI-space more
 correct and debuggable.
 Do this in the application's default.js:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

document.executeOnce('/savory/feature/seo/')
\end_layout

\begin_layout Plain Layout

Savory.SEO.registerExtensions()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And that's pretty much it!
\end_layout

\begin_layout Section
Shopping Cart Feature
\end_layout

\begin_layout Section
Wiki Feature
\end_layout

\end_body
\end_document
